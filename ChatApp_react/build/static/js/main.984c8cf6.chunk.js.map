{"version":3,"sources":["components/MessageForm.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleChange","event","target","isTyping","className","onSubmit","preventDefault","text","trim","length","sendMessage","placeHolder","onChange","htmlFor","PictureOutlined","type","multiple","id","style","display","files","classname","SendOutlined","TheirMessage","lastMessage","message","isFirstMessageByUser","sender","username","backgroundImage","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","float","title","keys","Object","key","lastMessageKey","width","marginRight","marginLeft","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.984c8cf6.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport {sendMessage, isTyping } from 'react-chat-engine';\r\nimport {SendOutlined,PictureOutlined} from '@ant-design/icons';\r\n\r\nconst MessageForm = (props) => {\r\n    const [value,setValue] = useState('');\r\n    const {chatId,creds} = props;\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n        if(text.length > 0 ) sendMessage(creds,chatId,{text});\r\n        setValue('');\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n        isTyping(props,chatId)\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds,chatId,{files:event.target.files,text: ''})\r\n    }\r\n\r\n    return (\r\n        <form className = \"message-form\" onSubmit = {handleSubmit}>\r\n            <input \r\n                className = \"message-input\"\r\n                placeHolder=\"Send a message ...\"\r\n                value = {value}\r\n                onChange={handleChange}\r\n                onSubmit={handleChange}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className = \"image-button\">\r\n                    <PictureOutlined className = \"picture-icon\" />\r\n                </span>\r\n            </label>\r\n            <input\r\n                type = \"file\"\r\n                multiple = {false}\r\n                id =\"upload-button\"\r\n                style = {{display: 'none'}}\r\n                onChange = {handleUpload}\r\n            />\r\n            <button type = \"submit\" classname= \"send-button\">\r\n                <SendOutlined className = \"send-icon\" />\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\nexport default MessageForm;\r\n","const TheirMessage = ({lastMessage, message}) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username != message.sender.username;\r\n\r\n    return (\r\n        <div className = \"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div \r\n                    className = \"message-avatar\"\r\n                    style = {{backgroundImage: 'url(${message?.sender?.avatar})'}}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nexport default TheirMessage;\r\n","import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\n\r\nconst ChatFeed = (props) => {\r\n    const {chats,activeChat,userName,messages} = props;\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message,isMyMessage)=>{\r\n        return chat.people.map((person,index)=> person.last_read == message.id && (\r\n            <div\r\n                key={'read_${index}'}\r\n                className = \"read-receipts\"\r\n                style={{\r\n                    float: isMyMessage? 'right': 'left',\r\n                    backgroundImage: 'url(${person?.person?.avatar})' \r\n                }}\r\n            />\r\n        ))\r\n    }\r\n    const renderMessages = () =>{\r\n        const keys = Object.keys(messages);\r\n        return keys.map((key,index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n            return (\r\n                <div key = {'msg_${index}'} style = {{width: '100%'}}>\r\n                    <div className = \"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <TheirMessage message = {message} lastMessage = {messages[lastMessageKey]} />\r\n                        }\r\n                    </div>\r\n                    <div className = \"read-receipts\" style = {{marginRight: isMyMessage ? '18px': '0px',marginLeft: isMyMessage ? '0px' : '68px'}}>\r\n                        {renderReadReceipts(message,isMyMessage)}\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    if (!chat) return <div />;\r\n    return (\r\n        <div classname = \"chat-feed\">\r\n            <div className = \"chat-title-container\">\r\n                <div className = \"chat-title\">{chat?.title}</div>\r\n                <div className =\"chat-subtitle\">\r\n                    {chat.people.map((person) => ' ${person.person.username}')}\r\n                </div>\r\n        </div>\r\n        {renderMessages()}\r\n        <div style = {{height:  '100px'}} />\r\n        <div className = \"message-form-container\">\r\n            <MessageForm {...props} chatId={activeChat} />\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\nexport default ChatFeed;","import {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginForm = () => {\r\n    const[username,setUsername] = useState('');\r\n    const[password,setPassword] = useState('');\r\n    const[error, setError] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const authObject = {'Project-ID':\"ebe0e356-e2b3-434c-9f82-f07eb801a477\",'User-Name':username,'User-Secret': password};\r\n        try{\r\n            axios.get('https://api.chatengine.io/chats', {headers: authObject});\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n            window.location.reload();\r\n        }catch(error){\r\n            setError(\"Incorrect Credentials, try again.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div classname=\"form\">\r\n                <h1 className =\"title\">Chat Application</h1>\r\n                <form onSubmit = {handleSubmit}>\r\n                    <input type=\"text\" value = {username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeHolder=\"Username\" required />\r\n                    <input type=\"password\" value = {password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeHolder=\"Password\" required />\r\n                    <div align = \"center\">\r\n                        <button type = \"submit\" className=\"button\">\r\n                            <span>Start Chating</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginForm","import { ChatEngine } from 'react-chat-engine';\r\nimport ChatFeed from './components/ChatFeed';\r\nimport LoginForm from './components/LoginForm';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n    if(!localStorage.getItem('username'))return <LoginForm />\r\n    return (\r\n        <ChatEngine\r\n            height = \"100vh\"\r\n            projectID=\"ebe0e356-e2b3-434c-9f82-f07eb801a477\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}